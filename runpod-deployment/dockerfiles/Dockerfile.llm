# RunPod-optimized vLLM Server with embedded models
FROM runpod/base:0.4.0-cuda12.1.0

# Install Python and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-pip \
    python3.11-dev \
    curl \
    git \
    ffmpeg \
    && ln -s /usr/bin/python3.11 /usr/bin/python \
    && ln -s /usr/bin/pip3 /usr/bin/pip \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install PyTorch with CUDA support (RunPod optimized versions)
RUN pip install --no-cache-dir \
    torch==2.1.0 \
    torchvision==0.16.0 \
    --index-url https://download.pytorch.org/whl/cu121

# Install vLLM and dependencies (pinned versions for stability)
RUN pip install --no-cache-dir \
    vllm==0.2.7 \
    transformers==4.36.0 \
    accelerate \
    safetensors \
    fastapi \
    uvicorn[standard] \
    requests \
    numpy \
    sentence-transformers

# Environment variables for offline operation
ENV HF_HOME=/root/.cache/huggingface
ENV TRANSFORMERS_CACHE=/root/.cache/huggingface
ENV HF_HUB_OFFLINE=1
ENV TRANSFORMERS_OFFLINE=1
ENV CUDA_VISIBLE_DEVICES=0
ENV VLLM_USE_TRITON=0
ENV CUDA_LAUNCH_BLOCKING=0
ENV TORCH_CUDA_ARCH_LIST="8.0;8.6;8.9;9.0"
ENV DISABLE_CUSTOM_ALL_REDUCE=1

# Create cache directory
RUN mkdir -p /root/.cache/huggingface

# Copy pre-download script and startup script
COPY source-code/download_models.py /app/download_models.py
COPY source-code/start_vllm.sh /app/start_vllm.sh

# Make scripts executable
RUN chmod +x /app/download_models.py /app/start_vllm.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Start vLLM
CMD ["/app/start_vllm.sh"]