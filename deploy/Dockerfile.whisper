# Whisper Transcription Server Dockerfile - Optimized
# Hebrew-optimized transcription using ivrit-ai/whisper-large-v3

FROM python:3.11-slim

WORKDIR /app

# Install system dependencies for audio processing
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libsndfile1 \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Pre-download model during build (for offline deployment)
ARG WHISPER_MODEL="ivrit-ai/whisper-large-v3"
ENV MODEL_NAME=${WHISPER_MODEL}

# Install Python dependencies and pre-download model in single layer
RUN set -e && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
        fastapi==0.104.1 \
        uvicorn==0.24.0 \
        transformers==4.41.2 \
        torch==2.3.0 \
        torchaudio==2.3.0 \
        accelerate==0.25.0 \
        safetensors==0.4.0 \
        librosa==0.10.2 \
        python-multipart==0.0.6 \
        numpy==1.24.3 && \
    python3 -c "\
import os; \
from transformers import AutoProcessor, AutoModelForSpeechSeq2Seq; \
model_name = os.environ.get('MODEL_NAME', 'ivrit-ai/whisper-large-v3'); \
print(f'Pre-downloading Whisper model: {model_name}'); \
processor = AutoProcessor.from_pretrained(model_name); \
model = AutoModelForSpeechSeq2Seq.from_pretrained(model_name); \
print(f'Whisper model {model_name} downloaded successfully')" && \
    pip cache purge && \
    rm -rf /tmp/* && \
    rm -rf /var/cache/* && \
    rm -rf /root/.cache/pip && \
    apt-get autoremove -y && \
    apt-get autoclean

# Copy service files
COPY deploy/whisper_service.py /app/
COPY deploy/start_whisper.sh /app/
RUN chmod +x /app/start_whisper.sh

# Expose port
EXPOSE 8004

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8004/health || exit 1

CMD ["/app/start_whisper.sh"]