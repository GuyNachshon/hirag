# Embedding Server Dockerfile - Optimized
FROM vllm/vllm-openai:latest

WORKDIR /app

# Set environment variables
ENV CUDA_VISIBLE_DEVICES=0
ENV VLLM_WORKER_MULTIPROC_METHOD=spawn

# Pre-download embedding model during build (for offline deployment)
ARG EMBEDDING_MODEL="Qwen/Qwen2-0.5B-Instruct"
ENV MODEL_NAME=${EMBEDDING_MODEL}

# Combined optimization: Download model, create script, and cleanup in single layer
RUN set -e && \
    # Pre-download model \
    python3 -c "\
import os; \
from huggingface_hub import snapshot_download; \
model_name = os.environ.get('MODEL_NAME', 'Qwen/Qwen2-0.5B-Instruct'); \
print(f'Pre-downloading embedding model: {model_name}'); \
snapshot_download(repo_id=model_name, cache_dir='/root/.cache/huggingface/hub', local_files_only=False, resume_download=True); \
print(f'Embedding model {model_name} downloaded successfully')" && \
    # Create startup script \
    echo '#!/bin/bash\n\
MODEL=${MODEL_NAME:-"Qwen/Qwen2-0.5B-Instruct"}\n\
\n\
echo "Starting Embedding server with model: $MODEL"\n\
echo "Model is pre-downloaded for offline deployment"\n\
\n\
vllm serve $MODEL \\\n\
  --host 0.0.0.0 \\\n\
  --port 8000 \\\n\
  --trust-remote-code' > /app/start_embedding.sh && \
    chmod +x /app/start_embedding.sh && \
    # Cleanup to reduce image size \
    pip cache purge && \
    rm -rf /tmp/* && \
    rm -rf /var/cache/* && \
    rm -rf /root/.cache/pip && \
    # Keep HuggingFace cache but remove unnecessary files \
    find /root/.cache/huggingface -name "*.tmp*" -delete 2>/dev/null || true && \
    # Remove build artifacts and unnecessary packages \
    apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/*

# Expose port
EXPOSE 8000

CMD ["/app/start_embedding.sh"]