# Mock OCR Service for Testing (No GPU Required)
FROM python:3.9-slim

WORKDIR /app

# Install dependencies
RUN pip install fastapi uvicorn pillow

# Create mock OCR service
RUN cat > mock_ocr.py << 'EOF'
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
import base64
import random
import time

app = FastAPI()

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "mock-ocr", "gpu": False}

@app.post("/v1/chat/completions")
async def process_image(file: UploadFile = File(None)):
    """Mock OCR endpoint that pretends to process images"""
    
    # Simulate processing time
    time.sleep(0.5)
    
    # Mock OCR results
    mock_texts = [
        "This is mock extracted text from the document.",
        "Page 1 of mock document contains sample text.",
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        "Mock OCR service successfully processed the image.",
        "Test document content extracted successfully."
    ]
    
    return {
        "id": "mock-ocr-" + str(int(time.time())),
        "object": "chat.completion",
        "created": int(time.time()),
        "model": "mock-ocr",
        "choices": [{
            "index": 0,
            "message": {
                "role": "assistant",
                "content": random.choice(mock_texts)
            },
            "finish_reason": "stop"
        }]
    }

@app.post("/ocr")
async def ocr_endpoint(file: UploadFile = File(...)):
    """Alternative OCR endpoint"""
    
    # Read file (but don't actually process it)
    contents = await file.read()
    
    # Return mock OCR result
    return {
        "success": True,
        "text": "Mock OCR extracted text from " + file.filename,
        "pages": 1,
        "processing_time": 0.5
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

EXPOSE 8000

CMD ["python", "mock_ocr.py"]