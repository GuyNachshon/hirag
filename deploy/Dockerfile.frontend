# Frontend Dockerfile for Offline Deployment
# Builds the Vue.js app and serves it with nginx

# Build stage - compile the Vue.js application
FROM node:18-alpine as builder

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies (will be cached if package.json doesn't change)
RUN npm ci --no-audit --no-fund

# Copy source code
COPY frontend/ ./

# Build the application for production
RUN npm run build

# Production stage - serve with nginx
FROM nginx:alpine

# Copy built files from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY frontend/nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Create environment variable injection script
RUN printf '#!/bin/sh\n\
# Inject runtime environment variables into the app\n\
# This allows configuration without rebuilding the image\n\
if [ -n "$VITE_API_URL" ]; then\n\
  find /usr/share/nginx/html -name "*.js" -exec sed -i "s|VITE_API_URL_PLACEHOLDER|$VITE_API_URL|g" {} +\n\
fi\n\
\n\
echo "Starting RAG Frontend with Nginx..."\n\
echo "Frontend available at: http://localhost:3000"\n\
echo "API endpoint: ${VITE_API_URL:-http://rag-api:8080}"\n\
echo ""\n\
echo "Services:"\n\
echo "  - Chat with RAG support"\n\
echo "  - File Search"\n\
echo "  - Document Upload"\n\
echo ""\n\
\n\
# Start nginx\n\
nginx -g "daemon off;"\n' > /docker-entrypoint.sh

RUN chmod +x /docker-entrypoint.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Start nginx with environment variable injection
CMD ["/docker-entrypoint.sh"]