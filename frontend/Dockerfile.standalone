# Standalone frontend Docker image for testing (no API dependency)

FROM nginx:alpine

# Remove default nginx config
RUN rm /etc/nginx/conf.d/default.conf

# Copy the frontend build files
COPY dist/ /usr/share/nginx/html/

# Create nginx config for standalone testing (no API proxy)
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 8087;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Proper MIME types for JS/CSS
    location ~* \.js$ {
        add_header Content-Type application/javascript;
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files \$uri =404;
    }

    location ~* \.css$ {
        add_header Content-Type text/css;
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files \$uri =404;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Static file root
    root /usr/share/nginx/html;
    index index.html;

    # SPA routing - try files first, then fallback to index.html
    location / {
        try_files \$uri \$uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        try_files \$uri =404;
    }

    # Mock API responses for testing (returns JSON)
    location /api/ {
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";

        if (\$request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            add_header Content-Length 0;
            return 204;
        }

        return 200 '{"status": "mock", "message": "API not connected - frontend testing mode"}';
    }

    # Mock health endpoint
    location /health {
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin "*";
        return 200 '{"status": "ok", "mode": "standalone"}';
    }

    # Frontend health check
    location /frontend-health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "frontend healthy (standalone mode)\\n";
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

# Expose port 8087
EXPOSE 8087

# Start nginx
CMD ["nginx", "-g", "daemon off;"]