# Multi-stage build for RAG API - Ultra Optimized
# Stage 1: Build dependencies
FROM python:3.9-slim as builder

WORKDIR /build

# Install build dependencies and runtime tools
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements first
COPY requirements.txt .

# Install Python dependencies to a specific directory
RUN pip install --no-cache-dir --target /build/deps -r requirements.txt

# Copy and install HiRAG
COPY HiRAG/ HiRAG/
RUN cd HiRAG && pip install --no-cache-dir --target /build/deps .

# Stage 2: Runtime
FROM python:3.9-slim as runtime

WORKDIR /app

# Install only runtime dependencies in builder stage and copy over
# No apt-get in runtime stage for offline compatibility

# Copy installed dependencies from builder
COPY --from=builder /build/deps /usr/local/lib/python3.9/site-packages/

# Copy curl binary from builder for health checks (offline compatibility)
COPY --from=builder /usr/bin/curl /usr/bin/curl
COPY --from=builder /usr/lib/x86_64-linux-gnu/libcurl.so.4 /usr/lib/x86_64-linux-gnu/libcurl.so.4
COPY --from=builder /lib/x86_64-linux-gnu/libssl.so.3 /lib/x86_64-linux-gnu/libssl.so.3
COPY --from=builder /lib/x86_64-linux-gnu/libcrypto.so.3 /lib/x86_64-linux-gnu/libcrypto.so.3

# Copy only necessary application files
COPY api/ api/
COPY file_parser/ file_parser/
COPY HiRAG/ HiRAG/
COPY requirements.txt .

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/config

# Create mount points for external configuration and data
VOLUME ["/app/config", "/app/data"]

# Set Python path
ENV PYTHONPATH=/app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start the API server
CMD ["python3", "-m", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8080"]